script.js
// بيانات المنتجات
const productsData = [
    {
        id: 1,
        name: "هاتف Samsung Galaxy S23 Ultra",
        category: "mobiles",
        price: 899,
        image: "https://images.unsplash.com/photo-1611186871348-b1ce696e52c9?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=80",
        description: "أحدث هاتف من سامسونج بشاشة ديناميكية AMOLED مقاس 6.8 بوصة، معالج Snapdragon 8 Gen 2، وكاميرا 200 ميجابكسل.",
        badge: "جديد"
    },
    {
        id: 2,
        name: "لابتوب Dell XPS 13",
        category: "laptops",
        price: 1299,
        image: "https://images.unsplash.com/photo-1496181133206-80ce9b88a853?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=80",
        description: "لابتوب فائق الأداء بشاشة InfinityEdge مقاس 13.4 بوصة، معالج Intel Core i7، ذاكرة 16GB، ومساحة تخزين 512GB SSD.",
        badge: "الأكثر مبيعاً"
    },
    {
        id: 3,
        name: "سماعات Sony WH-1000XM5",
        category: "audio",
        price: 349,
        image: "https://images.unsplash.com/photo-1505740420928-5e560c06d30e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=80",
        description: "سماعات رأس لاسلكية مع إلغاء الضوضاء النشط، مدة بطارية تصل إلى 30 ساعة، وميكروفون مدمج للمكالمات.",
        badge: "عرض خاص"
    },
    {
        id: 4,
        name: "كاميرا Canon EOS R6",
        category: "cameras",
        price: 2499,
        image: "https://images.unsplash.com/photo-1526170375885-4d8ecf77b99f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=80",
        description: "كاميرا ميرورلس احترافية بدقة 20.1 ميجابكسل، تسجيل فيديو 4K، نظام تثبيت الصورة، واي فاي وبلوتوث.",
        badge: ""
    },
    {
        id: 5,
        name: "تلفزيون Samsung QLED 4K",
        category: "tv",
        price: 1599,
        image: "https://images.unsplash.com/photo-1593359677879-a4bb92f829d1?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=80",
        description: "تلفزيون ذكي مقاس 65 بوصة بدقة 4K UHD، تقنية QLED، معالج Quantum 4K، وتطبيقات ذكية مدمجة.",
        badge: "جديد"
    },
    {
        id: 6,
        name: "ساعة Apple Watch Series 8",
        category: "mobiles",
        price: 499,
        image: "https://images.unsplash.com/photo-1546868871-7041f2a55e12?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=80",
        description: "ساعة ذكية بميزات صحية متقدمة، مقاومة للماء، شاشة Always-On Retina، وتتبع النشاط البدني.",
        badge: "عرض خاص"
    },
    {
        id: 7,
        name: "ماك بوك برو M2",
        category: "laptops",
        price: 1999,
        image: "https://images.unsplash.com/photo-1541807084-5c52b6b3adef?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=80",
        description: "لابتوب Apple MacBook Pro بشاشة 14 بوصة، معالج M2 Pro، ذاكرة 16GB، ومساحة تخزين 1TB SSD.",
        badge: "جديد"
    },
    {
        id: 8,
        name: "جهاز PlayStation 5",
        category: "tv",
        price: 699,
        image: "https://images.unsplash.com/photo-1606813907291-d86efa9b94db?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=80",
        description: "جهاز ألعاب الجيل التالي من سوني، مع وحدة تحكم DualSense، وقرص SSD سريع، ودعم 4K.",
        badge: "نفذت الكمية"
    }
];

// بيانات العروض
const offersData = [
    {
        title: "خصم 20% على جميع اللابتوبات",
        image: "https://images.unsplash.com/photo-1593642632823-8f785ba67e45?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=80",
        description: "احصل على خصم 20% على جميع أنواع اللابتوبات حتى نهاية الشهر. يشمل العروض أجهزة Dell وHP وLenovo وApple."
    },
    {
        title: "شحن مجاني للطلبات فوق 200 دينار",
        image: "https://images.unsplash.com/photo-1607082348824-0a96f2a4b9da?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=80",
        description: "احصل على شحن مجاني لجميع الطلبات التي تزيد عن 200 دينار أردني لجميع أنحاء المملكة."
    },
    {
        title: "هاتف Samsung Galaxy هدية",
        image: "https://images.unsplash.com/photo-1605787020600-b9ebd5df1d1d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=80",
        description: "احصل على هاتف Samsung Galaxy A14 مجاناً عند شراء أي تلفزيون 4K من متجرنا."
    }
];

// كائن لإدارة واجهة المستخدم وحالة التطبيق
const App = {
    // عناصر DOM التي سيتم التفاعل معها
    elements: {
        loginPortal: document.getElementById('login-portal'),
        mainContent: document.querySelector('.main-content'),
        adminPanel: document.getElementById('adminPanel'),
        adminBtn: document.getElementById('adminBtn'),
        productsContainer: document.getElementById('productsContainer'),
        offersContainer: document.querySelector('.offers-container'),
        categoryButtons: document.querySelectorAll('.category-btn'),
        swipeHandle: document.getElementById('swipeHandle'),
        swipeContainer: document.getElementById('swipeContainer'),
        swipeTrack: document.getElementById('swipeTrack'),
        cartCount: document.querySelector('.cart-count'),
        themeToggleBtn: document.querySelector('[data-action="toggle-theme"]'),
        scrollToProductsBtn: document.querySelector('[data-action="scroll-to-products"]'),
        scrollToOffersBtn: document.querySelector('[data-action="scroll-to-offers"]'),
        employeeLoginBtn: document.querySelector('[data-action="login-employee"]'),
        memberLoginBtn: document.querySelector('[data-action="login-member"]'),
        adminPanelReturnBtn: document.querySelector('[data-action="hide-admin-panel"]'),
        userPanelBtn: document.querySelector('[data-action="show-user-panel"]'),
        searchButton: document.querySelector('.searchbar .btn.primary'),
        searchInput: document.querySelector('.searchbar .input'),
    },
    // حالة التطبيق
    state: {
        isEmployee: false,
        cartItems: 0,
        currentTheme: document.body.getAttribute('data-theme') || 'dark',
        currentCategory: 'all',
    },

    // تهيئة التطبيق
    init() {
        this.bindEvents(); // ربط الأحداث بالعناصر
        this.renderProducts(this.state.currentCategory); // عرض المنتجات الافتراضية
        this.renderOffers(); // عرض العروض
        this.setView('portal'); // البدء ببوابة الدخول
    },

    // ربط مستمعي الأحداث
    bindEvents() {
        // أحداث بوابة الدخول
        if (this.elements.employeeLoginBtn) {
            this.elements.employeeLoginBtn.addEventListener('click', () => this.loginAsEmployee());
        }
        if (this.elements.memberLoginBtn) {
            this.elements.memberLoginBtn.addEventListener('click', () => this.loginAsMember());
        }
        this.initLoginSwipe(); // تهيئة وظيفة السحب

        // أحداث المتجر الرئيسي
        this.elements.categoryButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                const category = e.currentTarget.dataset.category;
                this.filterProducts(category);
                this.elements.categoryButtons.forEach(btn => btn.classList.remove('active'));
                e.currentTarget.classList.add('active');
                this.state.currentCategory = category; // تحديث الفئة الحالية
            });
        });

        if (this.elements.themeToggleBtn) {
            this.elements.themeToggleBtn.addEventListener('click', () => this.toggleTheme());
        }
        if (this.elements.scrollToProductsBtn) {
            this.elements.scrollToProductsBtn.addEventListener('click', () => this.scrollToSection('.section-title'));
        }
        if (this.elements.scrollToOffersBtn) {
            this.elements.scrollToOffersBtn.addEventListener('click', () => this.scrollToSection('.offers-section'));
        }
        if (this.elements.adminBtn) {
            this.elements.adminBtn.addEventListener('click', () => this.showAdminPanel());
        }
        if (this.elements.userPanelBtn) {
            this.elements.userPanelBtn.addEventListener('click', () => this.showUserPanel());
        }
        if (this.elements.searchButton) {
            this.elements.searchButton.addEventListener('click', () => this.searchProducts());
        }
        if (this.elements.searchInput) {
            this.elements.searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.searchProducts();
                }
            });
        }

        // أحداث لوحة التحكم
        if (this.elements.adminPanelReturnBtn) {
            this.elements.adminPanelReturnBtn.addEventListener('click', () => this.hideAdminPanel());
        }
    },

    // ==================== إدارة الواجهة والعرض ====================

    /**
     * تتحكم في عرض الأقسام الرئيسية للتطبيق (بوابة الدخول، المتجر، لوحة التحكم).
     * @param {string} mode - الوضع المطلوب ('portal', 'main', 'admin').
     */
    setView(mode) {
        // إخفاء جميع الأقسام الرئيسية أولاً
        this.elements.loginPortal.style.display = 'none';
        this.elements.mainContent.style.display = 'none';
        this.elements.adminPanel.style.display = 'none';

        // إظهار القسم المطلوب
        switch (mode) {
            case 'portal':
                this.elements.loginPortal.style.display = 'flex';
                break;
            case 'main':
                this.elements.mainContent.style.display = 'block';
                // التأكد من إظهار أقسام المتجر عند العودة من لوحة التحكم
                document.querySelectorAll('.hero, .categories, .section-title, #productsContainer, .offers-section, footer').forEach(el => {
                    if (el) el.style.display = '';
                });
                break;
            case 'admin':
                this.elements.mainContent.style.display = 'block'; // المتجر يظل مرئياً ولكن محتواه مخفي
                this.elements.adminPanel.style.display = 'block';
                // إخفاء أقسام المتجر عند عرض لوحة التحكم
                document.querySelectorAll('.hero, .categories, .section-title, #productsContainer, .offers-section, footer').forEach(el => {
                    if (el) el.style.display = 'none';
                });
                break;
        }

        // تحديث رؤية زر الإدارة بناءً على حالة الموظف
        this.elements.adminBtn.style.display = this.state.isEmployee ? 'inline-flex' : 'none';

        // التمرير لأعلى الصفحة عند تغيير العرض
        window.scrollTo({ top: 0, behavior: 'smooth' });
    },

    /**
     * تعرض إشعاراً مؤقتاً للمستخدم.
     * @param {string} message - نص الإشعار.
     * @param {string} type - نوع الإشعار ('success', 'error', 'warning', 'info').
     */
    showNotification(message, type = 'success') {
        const notification = document.createElement('div');
        notification.textContent = message;
        notification.style.position = 'fixed';
        notification.style.bottom = '20px';
        notification.style.right = '20px';
        notification.style.padding = '12px 20px';
        notification.style.borderRadius = 'var(--radius)';
        notification.style.boxShadow = 'var(--shadow)';
        notification.style.zIndex = '1000';
        notification.style.opacity = '0';
        notification.style.transition = 'opacity 0.3s ease, background-color 0.3s ease';
        notification.style.color = 'white';
        notification.style.textAlign = 'right'; // لضمان محاذاة النص لليمين

        switch (type) {
            case 'success':
                notification.style.backgroundColor = 'var(--success)';
                break;
            case 'error':
                notification.style.backgroundColor = 'var(--danger)';
                break;
            case 'warning':
                notification.style.backgroundColor = 'var(--warning)';
                notification.style.color = 'var(--dark)';
                break;
            case 'info':
                notification.style.backgroundColor = 'var(--primary)';
                break;
            default:
                notification.style.backgroundColor = 'var(--gray)';
        }

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.opacity = '1';
        }, 10);

        setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 300);
        }, 3000);
    },

    // ==================== وظائف الدخول ====================

    loginAsEmployee() {
        this.showNotification('جاري تحويلك إلى صفحة دخول الموظفين...', 'info');
        setTimeout(() => {
            this.state.isEmployee = true;
            this.setView('admin');
        }, 1000);
    },

    loginAsMember() {
        this.showNotification('جاري تحويلك إلى صفحة دخول الأعضاء...', 'info');
        setTimeout(() => {
            this.state.isEmployee = false;
            this.setView('main');
        }, 1000);
    },

    loginAsGuest() {
        this.showNotification('جاري الدخول كضيف...', 'info');
        setTimeout(() => {
            this.state.isEmployee = false;
            this.setView('main');
        }, 1200);
    },

    /**
     * تهيئة وظيفة السحب للدخول كضيف.
     */
    initLoginSwipe() {
        const { swipeHandle, swipeContainer, swipeTrack } = this.elements;
        if (!swipeHandle || !swipeContainer || !swipeTrack) return;

        let isDragging = false;
        let startPosition = 0;
        let currentTranslate = 0;
        const maxTranslate = swipeContainer.offsetWidth - swipeHandle.offsetWidth;
        const threshold = maxTranslate * 0.7; // عتبة التفعيل

        const resetSwipe = () => {
            swipeHandle.style.transition = 'transform 0.3s ease';
            swipeHandle.style.transform = 'translateX(0)';
            swipeHandle.classList.remove('swipe-success');
            swipeHandle.innerHTML = '<i class="fas fa-chevron-left"></i>';
            swipeTrack.textContent = "اسحب للدخول كضيف ←";
            swipeTrack.style.color = "var(--muted)";
            swipeContainer.style.cursor = 'default';
            currentTranslate = 0;
        };

        const startDrag = (e) => {
            isDragging = true;
            startPosition = e.type.includes('touch') ? e.touches[0].clientX : e.clientX;
            swipeHandle.style.transition = 'none'; // إزالة الانتقال أثناء السحب
            swipeContainer.style.cursor = 'grabbing';
        };

        const drag = (e) => {
            if (!isDragging) return;
            e.preventDefault(); // منع التمرير الافتراضي للصفحة أثناء السحب

            const currentClientX = e.type.includes('touch') ? e.touches[0].clientX : e.clientX;
            // حساب الفرق في الاتجاه الصحيح (من اليمين لليسار)
            const diff = startPosition - currentClientX;

            // التأكد من أن السحب لا يتجاوز الحدود
            if (diff < 0) { // إذا كان السحب لليسار (أقل من نقطة البداية)
                currentTranslate = 0;
            } else { // إذا كان السحب لليمين (أكثر من نقطة البداية)
                currentTranslate = Math.min(diff, maxTranslate);
            }

            swipeHandle.style.transform = `translateX(-${currentTranslate}px)`;

            if (currentTranslate >= threshold) {
                swipeHandle.classList.add('swipe-success');
                swipeHandle.innerHTML = '<i class="fas fa-check"></i>';
                swipeTrack.textContent = "حرر للإكمال";
                swipeTrack.style.color = "var(--success)";
            } else {
                swipeHandle.classList.remove('swipe-success');
                swipeHandle.innerHTML = '<i class="fas fa-chevron-left"></i>';
                swipeTrack.textContent = "اسحب للدخول كضيف ←";
                swipeTrack.style.color = "var(--muted)";
            }
        };

        const endDrag = () => {
            if (!isDragging) return;
            isDragging = false;

            if (currentTranslate >= threshold) {
                swipeHandle.style.transform = `translateX(-${maxTranslate}px)`;
                swipeHandle.classList.add('swipe-success');
                swipeTrack.textContent = "تم الدخول بنجاح!";
                swipeTrack.style.color = "var(--success)";
                setTimeout(() => {
                    this.loginAsGuest();
                    resetSwipe(); // إعادة تعيين السحب بعد الدخول
                }, 800);
            } else {
                resetSwipe();
            }
        };

        // مستمعي أحداث اللمس
        swipeHandle.addEventListener('touchstart', startDrag);
        swipeHandle.addEventListener('touchmove', drag, { passive: false });
        swipeHandle.addEventListener('touchend', endDrag);

        // مستمعي أحداث الماوس
        swipeHandle.addEventListener('mousedown', startDrag);
        document.addEventListener('mousemove', drag);
        document.addEventListener('mouseup', endDrag);
    },

    // ==================== وظائف المتجر ====================

    /**
     * يعرض المنتجات بناءً على الفئة المحددة أو نتيجة البحث.
     * @param {string} category - الفئة المراد عرضها ('all', 'mobiles', etc.).
     * @param {string} searchTerm - مصطلح البحث (اختياري).
     */
    renderProducts(category = 'all', searchTerm = '') {
        let filteredProducts = productsData;

        // تصفية حسب الفئة
        if (category !== 'all') {
            filteredProducts = filteredProducts.filter(product => product.category === category);
        }

        // تصفية حسب مصطلح البحث
        if (searchTerm) {
            const lowerCaseSearchTerm = searchTerm.toLowerCase();
            filteredProducts = filteredProducts.filter(product =>
                product.name.toLowerCase().includes(lowerCaseSearchTerm) ||
                product.description.toLowerCase().includes(lowerCaseSearchTerm)
            );
        }

        this.elements.productsContainer.innerHTML = '';

        if (filteredProducts.length === 0) {
            this.elements.productsContainer.innerHTML = '<div class="no-products">لا توجد منتجات مطابقة لمعايير البحث أو الفئة المحددة.</div>';
            return;
        }

        filteredProducts.forEach(product => {
            const productCard = document.createElement('div');
            productCard.className = 'product-card';
            productCard.innerHTML = `
                <div class="product-image">
                    <img src="${product.image}" alt="${product.name}">
                    ${product.badge ? `<div class="product-badge">${product.badge}</div>` : ''}
                </div>
                <div class="product-info">
                    <div class="product-category">${this.getCategoryName(product.category)}</div>
                    <h3 class="product-name">${product.name}</h3>
                    <p class="product-description">${product.description}</p>
                    <div class="product-price">${product.price} د.أ</div>
                    <div class="product-actions">
                        <button class="btn primary add-to-cart-btn" data-product-id="${product.id}"><i class="fas fa-shopping-cart"></i> إضافة إلى السلة</button>
                        <button class="btn ghost"><i class="far fa-heart"></i></button>
                    </div>
                </div>
            `;
            this.elements.productsContainer.appendChild(productCard);
        });

        // إضافة مستمعي الأحداث لأزرار "إضافة إلى السلة" بعد إنشاء البطاقات
        document.querySelectorAll('.add-to-cart-btn').forEach(button => {
            button.addEventListener('click', (e) => {
                const productId = parseInt(e.currentTarget.dataset.productId);
                this.addToCart(productId);
            });
        });
    },

    /**
     * يقوم بتصفية المنتجات المعروضة بناءً على الفئة.
     * @param {string} category - الفئة المراد التصفية بها.
     */
    filterProducts(category) {
        this.renderProducts(category);
    },

    /**
     * يقوم بالبحث عن المنتجات بناءً على مصطلح البحث في حقل الإدخال.
     */
    searchProducts() {
        const searchTerm = this.elements.searchInput.value.trim();
        // إعادة تعيين الفئة النشطة إلى "جميع المنتجات" عند البحث
        this.elements.categoryButtons.forEach(btn => {
            if (btn.dataset.category === 'all') {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }
        });
        this.state.currentCategory = 'all'; // تحديث الفئة الحالية
        this.renderProducts('all', searchTerm);
        if (searchTerm) {
            this.showNotification(`نتائج البحث عن: "${searchTerm}"`, 'info');
        } else {
            this.showNotification('عرض جميع المنتجات.', 'info');
        }
    },

    /**
     * يحول اسم الفئة البرمجي إلى اسم عرض مناسب.
     * @param {string} category - اسم الفئة البرمجي.
     * @returns {string} اسم الفئة للعرض.
     */
    getCategoryName(category) {
        const categoriesMap = {
            'mobiles': 'هواتف ذكية',
            'laptops': 'لابتوبات',
            'tv': 'تلفزيونات',
            'audio': 'سماعات',
            'cameras': 'كاميرات',
            'all': 'جميع المنتجات'
        };
        return categoriesMap[category] || category;
    },

    /**
     * يضيف منتجاً إلى سلة التسوق ويحدث العدد.
     * @param {number} productId - معرف المنتج.
     */
    addToCart(productId) {
        const product = productsData.find(p => p.id === productId);
        if (!product) {
            this.showNotification('حدث خطأ: المنتج غير موجود.', 'error');
            return;
        }

        this.state.cartItems++;
        this.elements.cartCount.textContent = this.state.cartItems;
        this.showNotification(`تم إضافة ${product.name} إلى سلة التسوق`, 'success');
    },

    /**
     * يعرض بطاقات العروض الخاصة.
     */
    renderOffers() {
        this.elements.offersContainer.innerHTML = '';

        offersData.forEach(offer => {
            const offerCard = document.createElement('div');
            offerCard.className = 'offer-card';
            offerCard.innerHTML = `
                <div class="offer-image">
                    <img src="${offer.image}" alt="${offer.title}">
                </div>
                <div class="offer-content">
                    <h3 class="offer-title">${offer.title}</h3>
                    <p class="offer-description">${offer.description}</p>
                    <button class="btn primary">استخدم العرض</button>
                </div>
            `;
            this.elements.offersContainer.appendChild(offerCard);
        });
    },

    /**
     * يقوم بالتمرير السلس إلى قسم معين في الصفحة.
     * @param {string} selector - محدد CSS للقسم المستهدف.
     */
    scrollToSection(selector) {
        const section = document.querySelector(selector);
        if (section) {
            section.scrollIntoView({ behavior: 'smooth' });
        }
    },

    /**
     * يبدل بين الوضع الليلي والنهاري للموقع.
     */
    toggleTheme() {
        this.state.currentTheme = this.state.currentTheme === 'dark' ? 'light' : 'dark';
        document.body.setAttribute('data-theme', this.state.currentTheme);
        this.showNotification(this.state.currentTheme === 'dark' ? 'تم تفعيل الوضع النهاري' : 'تم تفعيل الوضع الليلي', 'info');
    },

    // ==================== وظائف لوحة التحكم ====================

    showAdminPanel() {
        this.setView('admin');
        this.showNotification('مرحباً بك في لوحة تحكم المدير!', 'info');
    },

    hideAdminPanel() {
        this.setView('main');
        this.showNotification('تم العودة إلى المتجر.', 'info');
    },

    showUserPanel() {
        this.showNotification('جاري فتح لوحة تحكم المستخدم (هذه ميزة قيد التطوير).', 'info');
    }
};

// تهيئة التطبيق عند تحميل الصفحة بالكامل
document.addEventListener('DOMContentLoaded', () => App.init());
